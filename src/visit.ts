/** Generated **/
import { SyntaxKind } from "typescript";  
import type { AST, Context } from "./types.ts";

export const visit = (node: AST.AnyNode, visitor: AST.Visitor<unknown, unknown>, context: Context<unknown, unknown>) => {
  switch(node.kind) {
    case SyntaxKind.AnyKeyword: visitor.AnyKeyword?.(node, context); break;
    case SyntaxKind.ArrayBindingPattern: visitor.ArrayBindingPattern?.(node, context); break;
    case SyntaxKind.ArrayLiteralExpression: visitor.ArrayLiteralExpression?.(node, context); break;
    case SyntaxKind.ArrayType: visitor.ArrayType?.(node, context); break;
    case SyntaxKind.ArrowFunction: visitor.ArrowFunction?.(node, context); break;
    case SyntaxKind.AsExpression: visitor.AsExpression?.(node, context); break;
    case SyntaxKind.AwaitExpression: visitor.AwaitExpression?.(node, context); break;
    case SyntaxKind.BigIntKeyword: visitor.BigIntKeyword?.(node, context); break;
    case SyntaxKind.BigIntLiteral: visitor.BigIntLiteral?.(node, context); break;
    case SyntaxKind.BinaryExpression: visitor.BinaryExpression?.(node, context); break;
    case SyntaxKind.BindingElement: visitor.BindingElement?.(node, context); break;
    case SyntaxKind.Block: visitor.Block?.(node, context); break;
    case SyntaxKind.BooleanKeyword: visitor.BooleanKeyword?.(node, context); break;
    case SyntaxKind.BreakStatement: visitor.BreakStatement?.(node, context); break;
    case SyntaxKind.CallExpression: visitor.CallExpression?.(node, context); break;
    case SyntaxKind.CallSignature: visitor.CallSignature?.(node, context); break;
    case SyntaxKind.CaseBlock: visitor.CaseBlock?.(node, context); break;
    case SyntaxKind.CaseClause: visitor.CaseClause?.(node, context); break;
    case SyntaxKind.CatchClause: visitor.CatchClause?.(node, context); break;
    case SyntaxKind.ClassDeclaration: visitor.ClassDeclaration?.(node, context); break;
    case SyntaxKind.ClassExpression: visitor.ClassExpression?.(node, context); break;
    case SyntaxKind.ClassStaticBlockDeclaration: visitor.ClassStaticBlockDeclaration?.(node, context); break;
    case SyntaxKind.CommaListExpression: visitor.CommaListExpression?.(node, context); break;
    case SyntaxKind.ComputedPropertyName: visitor.ComputedPropertyName?.(node, context); break;
    case SyntaxKind.ConditionalExpression: visitor.ConditionalExpression?.(node, context); break;
    case SyntaxKind.ConditionalType: visitor.ConditionalType?.(node, context); break;
    case SyntaxKind.ConstructSignature: visitor.ConstructSignature?.(node, context); break;
    case SyntaxKind.Constructor: visitor.Constructor?.(node, context); break;
    case SyntaxKind.ConstructorType: visitor.ConstructorType?.(node, context); break;
    case SyntaxKind.ContinueStatement: visitor.ContinueStatement?.(node, context); break;
    case SyntaxKind.DebuggerStatement: visitor.DebuggerStatement?.(node, context); break;
    case SyntaxKind.Decorator: visitor.Decorator?.(node, context); break;
    case SyntaxKind.DefaultClause: visitor.DefaultClause?.(node, context); break;
    case SyntaxKind.DeleteExpression: visitor.DeleteExpression?.(node, context); break;
    case SyntaxKind.DoStatement: visitor.DoStatement?.(node, context); break;
    case SyntaxKind.ElementAccessExpression: visitor.ElementAccessExpression?.(node, context); break;
    case SyntaxKind.EmptyStatement: visitor.EmptyStatement?.(node, context); break;
    case SyntaxKind.EnumDeclaration: visitor.EnumDeclaration?.(node, context); break;
    case SyntaxKind.EnumMember: visitor.EnumMember?.(node, context); break;
    case SyntaxKind.ExportAssignment: visitor.ExportAssignment?.(node, context); break;
    case SyntaxKind.ExportDeclaration: visitor.ExportDeclaration?.(node, context); break;
    case SyntaxKind.ExportSpecifier: visitor.ExportSpecifier?.(node, context); break;
    case SyntaxKind.ExpressionStatement: visitor.ExpressionStatement?.(node, context); break;
    case SyntaxKind.ExpressionWithTypeArguments: visitor.ExpressionWithTypeArguments?.(node, context); break;
    case SyntaxKind.ExternalModuleReference: visitor.ExternalModuleReference?.(node, context); break;
    case SyntaxKind.FalseKeyword: visitor.FalseKeyword?.(node, context); break;
    case SyntaxKind.ForInStatement: visitor.ForInStatement?.(node, context); break;
    case SyntaxKind.ForOfStatement: visitor.ForOfStatement?.(node, context); break;
    case SyntaxKind.ForStatement: visitor.ForStatement?.(node, context); break;
    case SyntaxKind.FunctionDeclaration: visitor.FunctionDeclaration?.(node, context); break;
    case SyntaxKind.FunctionExpression: visitor.FunctionExpression?.(node, context); break;
    case SyntaxKind.FunctionType: visitor.FunctionType?.(node, context); break;
    case SyntaxKind.GetAccessor: visitor.GetAccessor?.(node, context); break;
    case SyntaxKind.HeritageClause: visitor.HeritageClause?.(node, context); break;
    case SyntaxKind.Identifier: visitor.Identifier?.(node, context); break;
    case SyntaxKind.IfStatement: visitor.IfStatement?.(node, context); break;
    case SyntaxKind.ImportAttribute: visitor.ImportAttribute?.(node, context); break;
    case SyntaxKind.ImportAttributes: visitor.ImportAttributes?.(node, context); break;
    case SyntaxKind.ImportClause: visitor.ImportClause?.(node, context); break;
    case SyntaxKind.ImportDeclaration: visitor.ImportDeclaration?.(node, context); break;
    case SyntaxKind.ImportEqualsDeclaration: visitor.ImportEqualsDeclaration?.(node, context); break;
    case SyntaxKind.ImportKeyword: visitor.ImportKeyword?.(node, context); break;
    case SyntaxKind.ImportSpecifier: visitor.ImportSpecifier?.(node, context); break;
    case SyntaxKind.ImportType: visitor.ImportType?.(node, context); break;
    case SyntaxKind.IndexSignature: visitor.IndexSignature?.(node, context); break;
    case SyntaxKind.IndexedAccessType: visitor.IndexedAccessType?.(node, context); break;
    case SyntaxKind.InferType: visitor.InferType?.(node, context); break;
    case SyntaxKind.InterfaceDeclaration: visitor.InterfaceDeclaration?.(node, context); break;
    case SyntaxKind.IntersectionType: visitor.IntersectionType?.(node, context); break;
    case SyntaxKind.IntrinsicKeyword: visitor.IntrinsicKeyword?.(node, context); break;
    case SyntaxKind.JSDocAllType: visitor.JSDocAllType?.(node, context); break;
    case SyntaxKind.JSDocFunctionType: visitor.JSDocFunctionType?.(node, context); break;
    case SyntaxKind.JSDocLink: visitor.JSDocLink?.(node, context); break;
    case SyntaxKind.JSDocLinkCode: visitor.JSDocLinkCode?.(node, context); break;
    case SyntaxKind.JSDocLinkPlain: visitor.JSDocLinkPlain?.(node, context); break;
    case SyntaxKind.JSDocMemberName: visitor.JSDocMemberName?.(node, context); break;
    case SyntaxKind.JSDocNamepathType: visitor.JSDocNamepathType?.(node, context); break;
    case SyntaxKind.JSDocNonNullableType: visitor.JSDocNonNullableType?.(node, context); break;
    case SyntaxKind.JSDocNullableType: visitor.JSDocNullableType?.(node, context); break;
    case SyntaxKind.JSDocOptionalType: visitor.JSDocOptionalType?.(node, context); break;
    case SyntaxKind.JSDocParameterTag: visitor.JSDocParameterTag?.(node, context); break;
    case SyntaxKind.JSDocPropertyTag: visitor.JSDocPropertyTag?.(node, context); break;
    case SyntaxKind.JSDocReturnTag: visitor.JSDocReturnTag?.(node, context); break;
    case SyntaxKind.JSDocSignature: visitor.JSDocSignature?.(node, context); break;
    case SyntaxKind.JSDocTemplateTag: visitor.JSDocTemplateTag?.(node, context); break;
    case SyntaxKind.JSDocText: visitor.JSDocText?.(node, context); break;
    case SyntaxKind.JSDocTypeExpression: visitor.JSDocTypeExpression?.(node, context); break;
    case SyntaxKind.JSDocTypeLiteral: visitor.JSDocTypeLiteral?.(node, context); break;
    case SyntaxKind.JSDocUnknownType: visitor.JSDocUnknownType?.(node, context); break;
    case SyntaxKind.JSDocVariadicType: visitor.JSDocVariadicType?.(node, context); break;
    case SyntaxKind.JsxAttribute: visitor.JsxAttribute?.(node, context); break;
    case SyntaxKind.JsxAttributes: visitor.JsxAttributes?.(node, context); break;
    case SyntaxKind.JsxClosingElement: visitor.JsxClosingElement?.(node, context); break;
    case SyntaxKind.JsxClosingFragment: visitor.JsxClosingFragment?.(node, context); break;
    case SyntaxKind.JsxElement: visitor.JsxElement?.(node, context); break;
    case SyntaxKind.JsxExpression: visitor.JsxExpression?.(node, context); break;
    case SyntaxKind.JsxFragment: visitor.JsxFragment?.(node, context); break;
    case SyntaxKind.JsxNamespacedName: visitor.JsxNamespacedName?.(node, context); break;
    case SyntaxKind.JsxOpeningElement: visitor.JsxOpeningElement?.(node, context); break;
    case SyntaxKind.JsxOpeningFragment: visitor.JsxOpeningFragment?.(node, context); break;
    case SyntaxKind.JsxSelfClosingElement: visitor.JsxSelfClosingElement?.(node, context); break;
    case SyntaxKind.JsxSpreadAttribute: visitor.JsxSpreadAttribute?.(node, context); break;
    case SyntaxKind.JsxText: visitor.JsxText?.(node, context); break;
    case SyntaxKind.LabeledStatement: visitor.LabeledStatement?.(node, context); break;
    case SyntaxKind.LiteralType: visitor.LiteralType?.(node, context); break;
    case SyntaxKind.MappedType: visitor.MappedType?.(node, context); break;
    case SyntaxKind.MetaProperty: visitor.MetaProperty?.(node, context); break;
    case SyntaxKind.MethodDeclaration: visitor.MethodDeclaration?.(node, context); break;
    case SyntaxKind.MethodSignature: visitor.MethodSignature?.(node, context); break;
    case SyntaxKind.MissingDeclaration: visitor.MissingDeclaration?.(node, context); break;
    case SyntaxKind.ModuleBlock: visitor.ModuleBlock?.(node, context); break;
    case SyntaxKind.ModuleDeclaration: visitor.ModuleDeclaration?.(node, context); break;
    case SyntaxKind.NamedExports: visitor.NamedExports?.(node, context); break;
    case SyntaxKind.NamedImports: visitor.NamedImports?.(node, context); break;
    case SyntaxKind.NamedTupleMember: visitor.NamedTupleMember?.(node, context); break;
    case SyntaxKind.NamespaceExport: visitor.NamespaceExport?.(node, context); break;
    case SyntaxKind.NamespaceExportDeclaration: visitor.NamespaceExportDeclaration?.(node, context); break;
    case SyntaxKind.NamespaceImport: visitor.NamespaceImport?.(node, context); break;
    case SyntaxKind.NeverKeyword: visitor.NeverKeyword?.(node, context); break;
    case SyntaxKind.NewExpression: visitor.NewExpression?.(node, context); break;
    case SyntaxKind.NoSubstitutionTemplateLiteral: visitor.NoSubstitutionTemplateLiteral?.(node, context); break;
    case SyntaxKind.NonNullExpression: visitor.NonNullExpression?.(node, context); break;
    case SyntaxKind.NotEmittedStatement: visitor.NotEmittedStatement?.(node, context); break;
    case SyntaxKind.NullKeyword: visitor.NullKeyword?.(node, context); break;
    case SyntaxKind.NumberKeyword: visitor.NumberKeyword?.(node, context); break;
    case SyntaxKind.NumericLiteral: visitor.NumericLiteral?.(node, context); break;
    case SyntaxKind.ObjectBindingPattern: visitor.ObjectBindingPattern?.(node, context); break;
    case SyntaxKind.ObjectKeyword: visitor.ObjectKeyword?.(node, context); break;
    case SyntaxKind.ObjectLiteralExpression: visitor.ObjectLiteralExpression?.(node, context); break;
    case SyntaxKind.OmittedExpression: visitor.OmittedExpression?.(node, context); break;
    case SyntaxKind.OptionalType: visitor.OptionalType?.(node, context); break;
    case SyntaxKind.Parameter: visitor.Parameter?.(node, context); break;
    case SyntaxKind.ParenthesizedExpression: visitor.ParenthesizedExpression?.(node, context); break;
    case SyntaxKind.ParenthesizedType: visitor.ParenthesizedType?.(node, context); break;
    case SyntaxKind.PartiallyEmittedExpression: visitor.PartiallyEmittedExpression?.(node, context); break;
    case SyntaxKind.PostfixUnaryExpression: visitor.PostfixUnaryExpression?.(node, context); break;
    case SyntaxKind.PrefixUnaryExpression: visitor.PrefixUnaryExpression?.(node, context); break;
    case SyntaxKind.PrivateIdentifier: visitor.PrivateIdentifier?.(node, context); break;
    case SyntaxKind.PropertyAccessExpression: visitor.PropertyAccessExpression?.(node, context); break;
    case SyntaxKind.PropertyAssignment: visitor.PropertyAssignment?.(node, context); break;
    case SyntaxKind.PropertyDeclaration: visitor.PropertyDeclaration?.(node, context); break;
    case SyntaxKind.PropertySignature: visitor.PropertySignature?.(node, context); break;
    case SyntaxKind.QualifiedName: visitor.QualifiedName?.(node, context); break;
    case SyntaxKind.RegularExpressionLiteral: visitor.RegularExpressionLiteral?.(node, context); break;
    case SyntaxKind.RestType: visitor.RestType?.(node, context); break;
    case SyntaxKind.ReturnStatement: visitor.ReturnStatement?.(node, context); break;
    case SyntaxKind.SatisfiesExpression: visitor.SatisfiesExpression?.(node, context); break;
    case SyntaxKind.SemicolonClassElement: visitor.SemicolonClassElement?.(node, context); break;
    case SyntaxKind.SetAccessor: visitor.SetAccessor?.(node, context); break;
    case SyntaxKind.ShorthandPropertyAssignment: visitor.ShorthandPropertyAssignment?.(node, context); break;
    case SyntaxKind.SourceFile: visitor.SourceFile?.(node, context); break;
    case SyntaxKind.SpreadAssignment: visitor.SpreadAssignment?.(node, context); break;
    case SyntaxKind.SpreadElement: visitor.SpreadElement?.(node, context); break;
    case SyntaxKind.StringKeyword: visitor.StringKeyword?.(node, context); break;
    case SyntaxKind.StringLiteral: visitor.StringLiteral?.(node, context); break;
    case SyntaxKind.SuperKeyword: visitor.SuperKeyword?.(node, context); break;
    case SyntaxKind.SwitchStatement: visitor.SwitchStatement?.(node, context); break;
    case SyntaxKind.SymbolKeyword: visitor.SymbolKeyword?.(node, context); break;
    case SyntaxKind.SyntheticExpression: visitor.SyntheticExpression?.(node, context); break;
    case SyntaxKind.TaggedTemplateExpression: visitor.TaggedTemplateExpression?.(node, context); break;
    case SyntaxKind.TemplateExpression: visitor.TemplateExpression?.(node, context); break;
    case SyntaxKind.TemplateHead: visitor.TemplateHead?.(node, context); break;
    case SyntaxKind.TemplateLiteralType: visitor.TemplateLiteralType?.(node, context); break;
    case SyntaxKind.TemplateLiteralTypeSpan: visitor.TemplateLiteralTypeSpan?.(node, context); break;
    case SyntaxKind.TemplateMiddle: visitor.TemplateMiddle?.(node, context); break;
    case SyntaxKind.TemplateSpan: visitor.TemplateSpan?.(node, context); break;
    case SyntaxKind.TemplateTail: visitor.TemplateTail?.(node, context); break;
    case SyntaxKind.ThisKeyword: visitor.ThisKeyword?.(node, context); break;
    case SyntaxKind.ThisType: visitor.ThisType?.(node, context); break;
    case SyntaxKind.ThrowStatement: visitor.ThrowStatement?.(node, context); break;
    case SyntaxKind.TrueKeyword: visitor.TrueKeyword?.(node, context); break;
    case SyntaxKind.TryStatement: visitor.TryStatement?.(node, context); break;
    case SyntaxKind.TupleType: visitor.TupleType?.(node, context); break;
    case SyntaxKind.TypeAliasDeclaration: visitor.TypeAliasDeclaration?.(node, context); break;
    case SyntaxKind.TypeAssertionExpression: visitor.TypeAssertionExpression?.(node, context); break;
    case SyntaxKind.TypeLiteral: visitor.TypeLiteral?.(node, context); break;
    case SyntaxKind.TypeOfExpression: visitor.TypeOfExpression?.(node, context); break;
    case SyntaxKind.TypeOperator: visitor.TypeOperator?.(node, context); break;
    case SyntaxKind.TypeParameter: visitor.TypeParameter?.(node, context); break;
    case SyntaxKind.TypePredicate: visitor.TypePredicate?.(node, context); break;
    case SyntaxKind.TypeQuery: visitor.TypeQuery?.(node, context); break;
    case SyntaxKind.TypeReference: visitor.TypeReference?.(node, context); break;
    case SyntaxKind.UndefinedKeyword: visitor.UndefinedKeyword?.(node, context); break;
    case SyntaxKind.UnionType: visitor.UnionType?.(node, context); break;
    case SyntaxKind.UnknownKeyword: visitor.UnknownKeyword?.(node, context); break;
    case SyntaxKind.VariableDeclaration: visitor.VariableDeclaration?.(node, context); break;
    case SyntaxKind.VariableDeclarationList: visitor.VariableDeclarationList?.(node, context); break;
    case SyntaxKind.VariableStatement: visitor.VariableStatement?.(node, context); break;
    case SyntaxKind.VoidExpression: visitor.VoidExpression?.(node, context); break;
    case SyntaxKind.VoidKeyword: visitor.VoidKeyword?.(node, context); break;
    case SyntaxKind.WhileStatement: visitor.WhileStatement?.(node, context); break;
    case SyntaxKind.WithStatement: visitor.WithStatement?.(node, context); break;
    case SyntaxKind.YieldExpression: visitor.YieldExpression?.(node, context); break;
  }
  node.forEachChild(child => visit(child as any, visitor, context));
  switch(node.kind) {
    case SyntaxKind.AnyKeyword: visitor["AnyKeyword:exit"]?.(node, context); break;
    case SyntaxKind.ArrayBindingPattern: visitor["ArrayBindingPattern:exit"]?.(node, context); break;
    case SyntaxKind.ArrayLiteralExpression: visitor["ArrayLiteralExpression:exit"]?.(node, context); break;
    case SyntaxKind.ArrayType: visitor["ArrayType:exit"]?.(node, context); break;
    case SyntaxKind.ArrowFunction: visitor["ArrowFunction:exit"]?.(node, context); break;
    case SyntaxKind.AsExpression: visitor["AsExpression:exit"]?.(node, context); break;
    case SyntaxKind.AwaitExpression: visitor["AwaitExpression:exit"]?.(node, context); break;
    case SyntaxKind.BigIntKeyword: visitor["BigIntKeyword:exit"]?.(node, context); break;
    case SyntaxKind.BigIntLiteral: visitor["BigIntLiteral:exit"]?.(node, context); break;
    case SyntaxKind.BinaryExpression: visitor["BinaryExpression:exit"]?.(node, context); break;
    case SyntaxKind.BindingElement: visitor["BindingElement:exit"]?.(node, context); break;
    case SyntaxKind.Block: visitor["Block:exit"]?.(node, context); break;
    case SyntaxKind.BooleanKeyword: visitor["BooleanKeyword:exit"]?.(node, context); break;
    case SyntaxKind.BreakStatement: visitor["BreakStatement:exit"]?.(node, context); break;
    case SyntaxKind.CallExpression: visitor["CallExpression:exit"]?.(node, context); break;
    case SyntaxKind.CallSignature: visitor["CallSignature:exit"]?.(node, context); break;
    case SyntaxKind.CaseBlock: visitor["CaseBlock:exit"]?.(node, context); break;
    case SyntaxKind.CaseClause: visitor["CaseClause:exit"]?.(node, context); break;
    case SyntaxKind.CatchClause: visitor["CatchClause:exit"]?.(node, context); break;
    case SyntaxKind.ClassDeclaration: visitor["ClassDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.ClassExpression: visitor["ClassExpression:exit"]?.(node, context); break;
    case SyntaxKind.ClassStaticBlockDeclaration: visitor["ClassStaticBlockDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.CommaListExpression: visitor["CommaListExpression:exit"]?.(node, context); break;
    case SyntaxKind.ComputedPropertyName: visitor["ComputedPropertyName:exit"]?.(node, context); break;
    case SyntaxKind.ConditionalExpression: visitor["ConditionalExpression:exit"]?.(node, context); break;
    case SyntaxKind.ConditionalType: visitor["ConditionalType:exit"]?.(node, context); break;
    case SyntaxKind.ConstructSignature: visitor["ConstructSignature:exit"]?.(node, context); break;
    case SyntaxKind.Constructor: visitor["Constructor:exit"]?.(node, context); break;
    case SyntaxKind.ConstructorType: visitor["ConstructorType:exit"]?.(node, context); break;
    case SyntaxKind.ContinueStatement: visitor["ContinueStatement:exit"]?.(node, context); break;
    case SyntaxKind.DebuggerStatement: visitor["DebuggerStatement:exit"]?.(node, context); break;
    case SyntaxKind.Decorator: visitor["Decorator:exit"]?.(node, context); break;
    case SyntaxKind.DefaultClause: visitor["DefaultClause:exit"]?.(node, context); break;
    case SyntaxKind.DeleteExpression: visitor["DeleteExpression:exit"]?.(node, context); break;
    case SyntaxKind.DoStatement: visitor["DoStatement:exit"]?.(node, context); break;
    case SyntaxKind.ElementAccessExpression: visitor["ElementAccessExpression:exit"]?.(node, context); break;
    case SyntaxKind.EmptyStatement: visitor["EmptyStatement:exit"]?.(node, context); break;
    case SyntaxKind.EnumDeclaration: visitor["EnumDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.EnumMember: visitor["EnumMember:exit"]?.(node, context); break;
    case SyntaxKind.ExportAssignment: visitor["ExportAssignment:exit"]?.(node, context); break;
    case SyntaxKind.ExportDeclaration: visitor["ExportDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.ExportSpecifier: visitor["ExportSpecifier:exit"]?.(node, context); break;
    case SyntaxKind.ExpressionStatement: visitor["ExpressionStatement:exit"]?.(node, context); break;
    case SyntaxKind.ExpressionWithTypeArguments: visitor["ExpressionWithTypeArguments:exit"]?.(node, context); break;
    case SyntaxKind.ExternalModuleReference: visitor["ExternalModuleReference:exit"]?.(node, context); break;
    case SyntaxKind.FalseKeyword: visitor["FalseKeyword:exit"]?.(node, context); break;
    case SyntaxKind.ForInStatement: visitor["ForInStatement:exit"]?.(node, context); break;
    case SyntaxKind.ForOfStatement: visitor["ForOfStatement:exit"]?.(node, context); break;
    case SyntaxKind.ForStatement: visitor["ForStatement:exit"]?.(node, context); break;
    case SyntaxKind.FunctionDeclaration: visitor["FunctionDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.FunctionExpression: visitor["FunctionExpression:exit"]?.(node, context); break;
    case SyntaxKind.FunctionType: visitor["FunctionType:exit"]?.(node, context); break;
    case SyntaxKind.GetAccessor: visitor["GetAccessor:exit"]?.(node, context); break;
    case SyntaxKind.HeritageClause: visitor["HeritageClause:exit"]?.(node, context); break;
    case SyntaxKind.Identifier: visitor["Identifier:exit"]?.(node, context); break;
    case SyntaxKind.IfStatement: visitor["IfStatement:exit"]?.(node, context); break;
    case SyntaxKind.ImportAttribute: visitor["ImportAttribute:exit"]?.(node, context); break;
    case SyntaxKind.ImportAttributes: visitor["ImportAttributes:exit"]?.(node, context); break;
    case SyntaxKind.ImportClause: visitor["ImportClause:exit"]?.(node, context); break;
    case SyntaxKind.ImportDeclaration: visitor["ImportDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.ImportEqualsDeclaration: visitor["ImportEqualsDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.ImportKeyword: visitor["ImportKeyword:exit"]?.(node, context); break;
    case SyntaxKind.ImportSpecifier: visitor["ImportSpecifier:exit"]?.(node, context); break;
    case SyntaxKind.ImportType: visitor["ImportType:exit"]?.(node, context); break;
    case SyntaxKind.IndexSignature: visitor["IndexSignature:exit"]?.(node, context); break;
    case SyntaxKind.IndexedAccessType: visitor["IndexedAccessType:exit"]?.(node, context); break;
    case SyntaxKind.InferType: visitor["InferType:exit"]?.(node, context); break;
    case SyntaxKind.InterfaceDeclaration: visitor["InterfaceDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.IntersectionType: visitor["IntersectionType:exit"]?.(node, context); break;
    case SyntaxKind.IntrinsicKeyword: visitor["IntrinsicKeyword:exit"]?.(node, context); break;
    case SyntaxKind.JSDocAllType: visitor["JSDocAllType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocFunctionType: visitor["JSDocFunctionType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocLink: visitor["JSDocLink:exit"]?.(node, context); break;
    case SyntaxKind.JSDocLinkCode: visitor["JSDocLinkCode:exit"]?.(node, context); break;
    case SyntaxKind.JSDocLinkPlain: visitor["JSDocLinkPlain:exit"]?.(node, context); break;
    case SyntaxKind.JSDocMemberName: visitor["JSDocMemberName:exit"]?.(node, context); break;
    case SyntaxKind.JSDocNamepathType: visitor["JSDocNamepathType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocNonNullableType: visitor["JSDocNonNullableType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocNullableType: visitor["JSDocNullableType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocOptionalType: visitor["JSDocOptionalType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocParameterTag: visitor["JSDocParameterTag:exit"]?.(node, context); break;
    case SyntaxKind.JSDocPropertyTag: visitor["JSDocPropertyTag:exit"]?.(node, context); break;
    case SyntaxKind.JSDocReturnTag: visitor["JSDocReturnTag:exit"]?.(node, context); break;
    case SyntaxKind.JSDocSignature: visitor["JSDocSignature:exit"]?.(node, context); break;
    case SyntaxKind.JSDocTemplateTag: visitor["JSDocTemplateTag:exit"]?.(node, context); break;
    case SyntaxKind.JSDocText: visitor["JSDocText:exit"]?.(node, context); break;
    case SyntaxKind.JSDocTypeExpression: visitor["JSDocTypeExpression:exit"]?.(node, context); break;
    case SyntaxKind.JSDocTypeLiteral: visitor["JSDocTypeLiteral:exit"]?.(node, context); break;
    case SyntaxKind.JSDocUnknownType: visitor["JSDocUnknownType:exit"]?.(node, context); break;
    case SyntaxKind.JSDocVariadicType: visitor["JSDocVariadicType:exit"]?.(node, context); break;
    case SyntaxKind.JsxAttribute: visitor["JsxAttribute:exit"]?.(node, context); break;
    case SyntaxKind.JsxAttributes: visitor["JsxAttributes:exit"]?.(node, context); break;
    case SyntaxKind.JsxClosingElement: visitor["JsxClosingElement:exit"]?.(node, context); break;
    case SyntaxKind.JsxClosingFragment: visitor["JsxClosingFragment:exit"]?.(node, context); break;
    case SyntaxKind.JsxElement: visitor["JsxElement:exit"]?.(node, context); break;
    case SyntaxKind.JsxExpression: visitor["JsxExpression:exit"]?.(node, context); break;
    case SyntaxKind.JsxFragment: visitor["JsxFragment:exit"]?.(node, context); break;
    case SyntaxKind.JsxNamespacedName: visitor["JsxNamespacedName:exit"]?.(node, context); break;
    case SyntaxKind.JsxOpeningElement: visitor["JsxOpeningElement:exit"]?.(node, context); break;
    case SyntaxKind.JsxOpeningFragment: visitor["JsxOpeningFragment:exit"]?.(node, context); break;
    case SyntaxKind.JsxSelfClosingElement: visitor["JsxSelfClosingElement:exit"]?.(node, context); break;
    case SyntaxKind.JsxSpreadAttribute: visitor["JsxSpreadAttribute:exit"]?.(node, context); break;
    case SyntaxKind.JsxText: visitor["JsxText:exit"]?.(node, context); break;
    case SyntaxKind.LabeledStatement: visitor["LabeledStatement:exit"]?.(node, context); break;
    case SyntaxKind.LiteralType: visitor["LiteralType:exit"]?.(node, context); break;
    case SyntaxKind.MappedType: visitor["MappedType:exit"]?.(node, context); break;
    case SyntaxKind.MetaProperty: visitor["MetaProperty:exit"]?.(node, context); break;
    case SyntaxKind.MethodDeclaration: visitor["MethodDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.MethodSignature: visitor["MethodSignature:exit"]?.(node, context); break;
    case SyntaxKind.MissingDeclaration: visitor["MissingDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.ModuleBlock: visitor["ModuleBlock:exit"]?.(node, context); break;
    case SyntaxKind.ModuleDeclaration: visitor["ModuleDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.NamedExports: visitor["NamedExports:exit"]?.(node, context); break;
    case SyntaxKind.NamedImports: visitor["NamedImports:exit"]?.(node, context); break;
    case SyntaxKind.NamedTupleMember: visitor["NamedTupleMember:exit"]?.(node, context); break;
    case SyntaxKind.NamespaceExport: visitor["NamespaceExport:exit"]?.(node, context); break;
    case SyntaxKind.NamespaceExportDeclaration: visitor["NamespaceExportDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.NamespaceImport: visitor["NamespaceImport:exit"]?.(node, context); break;
    case SyntaxKind.NeverKeyword: visitor["NeverKeyword:exit"]?.(node, context); break;
    case SyntaxKind.NewExpression: visitor["NewExpression:exit"]?.(node, context); break;
    case SyntaxKind.NoSubstitutionTemplateLiteral: visitor["NoSubstitutionTemplateLiteral:exit"]?.(node, context); break;
    case SyntaxKind.NonNullExpression: visitor["NonNullExpression:exit"]?.(node, context); break;
    case SyntaxKind.NotEmittedStatement: visitor["NotEmittedStatement:exit"]?.(node, context); break;
    case SyntaxKind.NullKeyword: visitor["NullKeyword:exit"]?.(node, context); break;
    case SyntaxKind.NumberKeyword: visitor["NumberKeyword:exit"]?.(node, context); break;
    case SyntaxKind.NumericLiteral: visitor["NumericLiteral:exit"]?.(node, context); break;
    case SyntaxKind.ObjectBindingPattern: visitor["ObjectBindingPattern:exit"]?.(node, context); break;
    case SyntaxKind.ObjectKeyword: visitor["ObjectKeyword:exit"]?.(node, context); break;
    case SyntaxKind.ObjectLiteralExpression: visitor["ObjectLiteralExpression:exit"]?.(node, context); break;
    case SyntaxKind.OmittedExpression: visitor["OmittedExpression:exit"]?.(node, context); break;
    case SyntaxKind.OptionalType: visitor["OptionalType:exit"]?.(node, context); break;
    case SyntaxKind.Parameter: visitor["Parameter:exit"]?.(node, context); break;
    case SyntaxKind.ParenthesizedExpression: visitor["ParenthesizedExpression:exit"]?.(node, context); break;
    case SyntaxKind.ParenthesizedType: visitor["ParenthesizedType:exit"]?.(node, context); break;
    case SyntaxKind.PartiallyEmittedExpression: visitor["PartiallyEmittedExpression:exit"]?.(node, context); break;
    case SyntaxKind.PostfixUnaryExpression: visitor["PostfixUnaryExpression:exit"]?.(node, context); break;
    case SyntaxKind.PrefixUnaryExpression: visitor["PrefixUnaryExpression:exit"]?.(node, context); break;
    case SyntaxKind.PrivateIdentifier: visitor["PrivateIdentifier:exit"]?.(node, context); break;
    case SyntaxKind.PropertyAccessExpression: visitor["PropertyAccessExpression:exit"]?.(node, context); break;
    case SyntaxKind.PropertyAssignment: visitor["PropertyAssignment:exit"]?.(node, context); break;
    case SyntaxKind.PropertyDeclaration: visitor["PropertyDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.PropertySignature: visitor["PropertySignature:exit"]?.(node, context); break;
    case SyntaxKind.QualifiedName: visitor["QualifiedName:exit"]?.(node, context); break;
    case SyntaxKind.RegularExpressionLiteral: visitor["RegularExpressionLiteral:exit"]?.(node, context); break;
    case SyntaxKind.RestType: visitor["RestType:exit"]?.(node, context); break;
    case SyntaxKind.ReturnStatement: visitor["ReturnStatement:exit"]?.(node, context); break;
    case SyntaxKind.SatisfiesExpression: visitor["SatisfiesExpression:exit"]?.(node, context); break;
    case SyntaxKind.SemicolonClassElement: visitor["SemicolonClassElement:exit"]?.(node, context); break;
    case SyntaxKind.SetAccessor: visitor["SetAccessor:exit"]?.(node, context); break;
    case SyntaxKind.ShorthandPropertyAssignment: visitor["ShorthandPropertyAssignment:exit"]?.(node, context); break;
    case SyntaxKind.SourceFile: visitor["SourceFile:exit"]?.(node, context); break;
    case SyntaxKind.SpreadAssignment: visitor["SpreadAssignment:exit"]?.(node, context); break;
    case SyntaxKind.SpreadElement: visitor["SpreadElement:exit"]?.(node, context); break;
    case SyntaxKind.StringKeyword: visitor["StringKeyword:exit"]?.(node, context); break;
    case SyntaxKind.StringLiteral: visitor["StringLiteral:exit"]?.(node, context); break;
    case SyntaxKind.SuperKeyword: visitor["SuperKeyword:exit"]?.(node, context); break;
    case SyntaxKind.SwitchStatement: visitor["SwitchStatement:exit"]?.(node, context); break;
    case SyntaxKind.SymbolKeyword: visitor["SymbolKeyword:exit"]?.(node, context); break;
    case SyntaxKind.SyntheticExpression: visitor["SyntheticExpression:exit"]?.(node, context); break;
    case SyntaxKind.TaggedTemplateExpression: visitor["TaggedTemplateExpression:exit"]?.(node, context); break;
    case SyntaxKind.TemplateExpression: visitor["TemplateExpression:exit"]?.(node, context); break;
    case SyntaxKind.TemplateHead: visitor["TemplateHead:exit"]?.(node, context); break;
    case SyntaxKind.TemplateLiteralType: visitor["TemplateLiteralType:exit"]?.(node, context); break;
    case SyntaxKind.TemplateLiteralTypeSpan: visitor["TemplateLiteralTypeSpan:exit"]?.(node, context); break;
    case SyntaxKind.TemplateMiddle: visitor["TemplateMiddle:exit"]?.(node, context); break;
    case SyntaxKind.TemplateSpan: visitor["TemplateSpan:exit"]?.(node, context); break;
    case SyntaxKind.TemplateTail: visitor["TemplateTail:exit"]?.(node, context); break;
    case SyntaxKind.ThisKeyword: visitor["ThisKeyword:exit"]?.(node, context); break;
    case SyntaxKind.ThisType: visitor["ThisType:exit"]?.(node, context); break;
    case SyntaxKind.ThrowStatement: visitor["ThrowStatement:exit"]?.(node, context); break;
    case SyntaxKind.TrueKeyword: visitor["TrueKeyword:exit"]?.(node, context); break;
    case SyntaxKind.TryStatement: visitor["TryStatement:exit"]?.(node, context); break;
    case SyntaxKind.TupleType: visitor["TupleType:exit"]?.(node, context); break;
    case SyntaxKind.TypeAliasDeclaration: visitor["TypeAliasDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.TypeAssertionExpression: visitor["TypeAssertionExpression:exit"]?.(node, context); break;
    case SyntaxKind.TypeLiteral: visitor["TypeLiteral:exit"]?.(node, context); break;
    case SyntaxKind.TypeOfExpression: visitor["TypeOfExpression:exit"]?.(node, context); break;
    case SyntaxKind.TypeOperator: visitor["TypeOperator:exit"]?.(node, context); break;
    case SyntaxKind.TypeParameter: visitor["TypeParameter:exit"]?.(node, context); break;
    case SyntaxKind.TypePredicate: visitor["TypePredicate:exit"]?.(node, context); break;
    case SyntaxKind.TypeQuery: visitor["TypeQuery:exit"]?.(node, context); break;
    case SyntaxKind.TypeReference: visitor["TypeReference:exit"]?.(node, context); break;
    case SyntaxKind.UndefinedKeyword: visitor["UndefinedKeyword:exit"]?.(node, context); break;
    case SyntaxKind.UnionType: visitor["UnionType:exit"]?.(node, context); break;
    case SyntaxKind.UnknownKeyword: visitor["UnknownKeyword:exit"]?.(node, context); break;
    case SyntaxKind.VariableDeclaration: visitor["VariableDeclaration:exit"]?.(node, context); break;
    case SyntaxKind.VariableDeclarationList: visitor["VariableDeclarationList:exit"]?.(node, context); break;
    case SyntaxKind.VariableStatement: visitor["VariableStatement:exit"]?.(node, context); break;
    case SyntaxKind.VoidExpression: visitor["VoidExpression:exit"]?.(node, context); break;
    case SyntaxKind.VoidKeyword: visitor["VoidKeyword:exit"]?.(node, context); break;
    case SyntaxKind.WhileStatement: visitor["WhileStatement:exit"]?.(node, context); break;
    case SyntaxKind.WithStatement: visitor["WithStatement:exit"]?.(node, context); break;
    case SyntaxKind.YieldExpression: visitor["YieldExpression:exit"]?.(node, context); break;
  }
}
